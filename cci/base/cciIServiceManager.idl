/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * David Marteau (CCI Implementation)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "cciISupports.idl"

/**
 * The cciIServiceManager manager interface provides a means to obtain
 * global services in an application. The service manager depends on the
 * repository to find and instantiate factories to obtain services.
 *
 * Users of the service manager must first obtain a pointer to the global
 * service manager by calling CCI_GetServiceManager. After that,
 * they can request specific services by calling GetService. When they are
 * finished they can CCI_RELEASE() the service as usual.
 *
 * A user of a service may keep references to particular services indefinitely
 * and only must call Release when it shuts down.
 *
 * @status FROZEN
 */

[scriptable, uuid(8bb35ed9-e332-462d-9155-4a002ab5c958)]
interface cciIServiceManager : cciISupports
{
  /**
   * getServiceByContractID
   *
   * Returns the instance that implements aClass or aContractID and the
   * interface aIID.  This may result in the instance being created.
   *
   * @param aClass or aContractID : aClass or aContractID of object
   *                                instance requested
   * @param aIID : IID of interface requested
   * @param result : resulting service
   */
   void getService (in dmCIDRef aClass, in dmIIDRef aIID, [iid_is (aIID), retval] out cciQIResult result);

   void getServiceByContractID (in string aContractID, in dmIIDRef aIID, [iid_is (aIID), retval] out cciQIResult result);
};


