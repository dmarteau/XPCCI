/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 1998
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * David Marteau (CCI Implementation)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either of the GNU General Public License Version 2 or later (the "GPL"),
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "cciISupports.idl"

interface cciIComponentManager;

[scriptable, uuid(7392d032-5371-11d3-994e-00805fd26fee)]
interface cciIModule : cciISupports
{
  /**
   * Object Instance Creation
   *
   * Obtains a Class Object from a cciIModule for a given CID and IID pair.
   * This class object can either be query to a cciIFactory or a may be
   * query to a cciIClassInfo.
   *
   * @param aCompMgr  : The global component manager
   * @param aClass    : ClassID of object instance requested
   * @param aIID      : IID of interface requested
   *
   */
   void getClassObject(in cciIComponentManager aCompMgr, in dmCIDRef aClass, in dmIIDRef aIID,
                       [iid_is (aIID), retval] out cciQIResult aResult);

  /**
   * One time registration callback
   *
   * When the cciIModule is discovered, this method will be
   * called so that any setup registration can be preformed.
   *
   * @param aCompMgr  : The global component manager
   * @param aLocation : The location of the cciIModule on disk
   * @param aLoaderStr: Opaque loader specific string
   * @param aType     : Loader Type being used to load this module
   */
   void registerSelf (in cciIComponentManager aCompMgr, in string aLocation, in string aLoaderStr,
                      in string aType);
  /**
   * One time unregistration callback
   *
   * When the cciIModule is being unregistered, this method will be
   * called so that any unregistration can be preformed
   *
   * @param aCompMgr   : The global component manager
   * @param aLocation  : The location of the cciIModule on disk
   * @param aLoaderStr : Opaque loader specific string
   *
   */
   void unregisterSelf (in cciIComponentManager aCompMgr, in string aLocation, in string aLoaderStr);

  /**
   * Module load management
   *
   * @param aCompMgr  : The global component manager
   *
   * @return indicates to the caller if the module can be unloaded.
   *     Returning PR_TRUE isn't a guarantee that the module will be
   *   unloaded. It constitues only willingness of the module to be
   *   unloaded.  It is very important to ensure that no outstanding
   *       references to the module's code/data exist before returning
   *       PR_TRUE.
   *   Returning PR_FALSE guaratees that the module won't be unloaded.
   */
   boolean canUnload (in cciIComponentManager aCompMgr);
};


