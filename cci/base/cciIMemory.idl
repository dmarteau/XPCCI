/*
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
#
# The Original Code is Daim code.
#
# The Initial Developer of the Original Code is
#   David Marteau
# Portions created by the Initial Developer are Copyright (C) 2008
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#   David Marteau (dhmarteau@gmail.com)
#
# Alternatively, the contents of this file may be used under the terms of
# either of the GNU General Public License Version 2 or later (the "GPL"),
# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
*/

#include "cciIXPCOMSupports.idl"

/**
 * cciIMemory: interface to allocate and deallocate memory.
 */
[scriptable, uuid(a6c393b2-271c-4ce7-bfb8-5c2eeac3b70d)]
interface cciIMemory : cciIXPCOMSupports
{
  /**
   * Allocates a block of memory of a particular size. If the memory 
   * cannot be allocated (because of an out-of-memory condition), null
   * is returned.
   * 
   * @param size - the size of the block to allocate
   * @result the block of memory
   */
  [noscript, notxpcom] voidPtr  alloc(in size_t size);
  
  /*
   * Frees a block of memory. Null is a permissible value, in which case
   * nothing happens. 
   * 
   * @param ptr - the block of memory to free
   */
  [noscript, notxpcom] void  free(in voidPtr ptr);
  
  /*
   * Reallocates a block of memory to a new size.
   * 
   * @param ptr - the block of memory to reallocate
   * @param size - the new size
   * @result the reallocated block of memory
   * 
   * If ptr is null, this function behaves like malloc.
   * If s is the size of the block to which ptr points, the first
   * min(s, size) bytes of ptr's block are copied to the new block.
   * If the allocation succeeds, ptr is freed and a pointer to the 
   * new block returned.  If the allocation fails, ptr is not freed
   * and null is returned. The returned value may be the same as ptr.
   */
  [noscript, notxpcom] voidPtr realloc(in voidPtr ptr, in size_t newSize );
  
  /**
   * Duplicate a block of memory
   * 
   * @param ptr - the block of memory to reallocate
   * @param size - the new size
   * @result the new block of memory where the data is copied to
   */
  [noscript, notxpcom] voidPtr clone(in voidPtr ptr, in size_t size );

};


